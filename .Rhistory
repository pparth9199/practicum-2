<<<<<<< HEAD
return(newJournal.df)
}
parseAbstract <- function(anAbstractNode)
{
newAbstract.df <-data.frame(Label = character(),
AbstractText = character(),
stringsAsFactors = F)
n <- xmlSize(anAbstractNode)
for (i in 1: n)
{
a<-xmlAttrs(anAbstractNode[[i]])
aLabel<- a[1]
if (length(aLabel)==0)
aLabel<-""
aText<- xmlValue(anAbstractNode[[i]])
if (length(aText)==0)
aText<-""
newAbstract.df[i,1] <- aLabel
newAbstract.df[i,2] <- aText
}
return(newAbstract.df)
}
parseArticle <- function(anArticleNode)
{
a<-xmlAttrs(anArticleNode)
PubModel<-a[1]
ArticleTitle<-xpathSApply(anArticleNode, "./ArticleTitle", xmlValue)
Pagination<-xpathSApply(anArticleNode, "./Pagination/MedlinePgn", xmlValue)
Language<-xpathSApply(anArticleNode, "./Language", xmlValue)
year <- xpathSApply(anArticleNode, "./ArticleDate/Year", xmlValue)
if (length(year) == 0)
year <- ""
month <- xpathSApply(anArticleNode, "./ArticleDate/Month", xmlValue)
if (length(month) == 0)
month <- ""
day <- xpathSApply(anArticleNode, "./ArticleDate/Day", xmlValue)
if (length(day) == 0)
day <- ""
ArticleDate<-paste(year, month, day, sep="-")
newArticle.df <- data.frame(PubModel, ArticleTitle, Pagination,
ArticleDate, Language,
stringsAsFactors = F)
return (newArticle.df)
}
rowExists <- function (aRow, aDF)
{
n <- nrow(aDF)
c <- ncol(aDF)
if (n == 0)
{
return(0)
}
for (a in 1:n)
{
if (all(aDF[a,] == aRow[1,]))
{
return(a)
}
}
return(0)
}
parseAuthor <- function(anAuthorListNode)
{
newAuthor.df <-data.frame(LastName = character(),
ForeName = character(),
Initial = character(),
Affiliation = character(),
stringsAsFactors = F)
n <- xmlSize(anAuthorListNode)
for (i in 1: n)
{
child<-anAuthorListNode[[i]]
lName<-xpathSApply(child, "./LastName", xmlValue)
if (length(lName) == 0)
lName <- ""
fName<-xpathSApply(child, "./ForeName", xmlValue)
if (length(fName) == 0)
fName <- ""
initial<-xpathSApply(child, "./Initials", xmlValue)
if (length(initial) == 0)
initial <- ""
affi<-xpathSApply(child, "./Affiliation", xmlValue)
if (length(affi) == 0)
affi <- ""
newAuthor.df[i,1] <- lName
newAuthor.df[i,2] <- fName
newAuthor.df[i,3] <- initial
newAuthor.df[i,4] <- affi
}
return(newAuthor.df)
}
findIndex<- function(aNode, name)
{
numberOfChildren<-xmlSize(aNode)
i<-1
while (i<=numberOfChildren)
{
if (xmlName(aNode[[i]])==name)
break;
i<- i + 1
}
return (i)
}
numPubmedArticle <- xmlSize(r)
for (i in 1:numPubmedArticle)
{
currentNode<- r[[i]]
firstChild<-currentNode[[1]]
secondChild<-currentNode[[2]]
PMID<-as.numeric(xmlValue(firstChild[[1]]))
historyNode<-secondChild[[1]]
##use history function to construct the history table
historyData<-parseHistory(historyNode)
numberOfHistoryData<-nrow(historyData)
existingRows<-nrow(History.df)
for(j in 1: numberOfHistoryData)
{
currentRow<-existingRows + j
History.df[currentRow, 1] <-currentRow
History.df[currentRow, 2] <-PMID
History.df[currentRow, 3] <-historyData[j, 1]
History.df[currentRow, 4] <-historyData[j, 2]
}
## use author function to construct the author table
articleIndex<-findIndex(firstChild, "Article")
articleNode<-firstChild[[articleIndex]]
authorListIndex<-findIndex(articleNode, "AuthorList")
authorListNode<-articleNode[[authorListIndex]]
authorData<-parseAuthor(authorListNode)
numberOfAuthorData<-nrow(authorData)
existingRowsforAuthor<-nrow(Author.df)
for(j in 1: numberOfAuthorData)
{
currentRow<-existingRowsforAuthor + j
Author.df[currentRow, 1] <- currentRow
Author_ref.df[currentRow, 1] <- currentRow
Author_ref.df[currentRow, 2] <- PMID
Author.df[currentRow, 2] <-authorData[j, 1]
Author.df[currentRow, 3] <-authorData[j, 2]
Author.df[currentRow, 4] <-authorData[j, 3]
Author.df[currentRow, 5] <-authorData[j, 4]
}
# use the same articleIndex and articleNode as above
abstractIndex<-findIndex(articleNode, "Abstract")
abstractNode<-articleNode[[abstractIndex]]
abstractData<-parseAbstract(abstractNode)
numberOfAbstractData<-nrow(abstractData)
existingRowsforAbstract<-nrow(Abstract.df)
for(j in 1: numberOfAbstractData)
{
currentRow<-existingRowsforAbstract + j
Abstract.df[currentRow, 1] = currentRow
Abstract.df[currentRow, 2] = PMID
Abstract.df[currentRow, 3] <-abstractData[j,1]
Abstract.df[currentRow, 4] <-abstractData[j,2]
}
# use the same articleIndex and articleNode as above
publicationTypeIndex<-findIndex(articleNode, "PublicationTypeList")
publicationTypeListNode<-articleNode[[publicationTypeIndex]]
publicationTypeData<-parsePubType(publicationTypeListNode)
numberOfpubTypeData<-nrow(publicationTypeData)
existingRowsforpubTypeData<-nrow(PubType.df)
for (j in 1: numberOfpubTypeData)
{
currentRow<-existingRowsforpubTypeData + j
PubType.df[currentRow, 1] = currentRow
PubType.df[currentRow, 2] = PMID
PubType.df[currentRow, 3] = publicationTypeData[j,1]
}
# use the same articleIndex and articleNode as above
journalIndex<-findIndex(articleNode, "Journal")
journalNode<-articleNode[[journalIndex]]
journalData<-parseJournal(journalNode)
exists<-rowExists(journalData, Journal.df[,2:ncol(Journal.df)])
if (exists==0)
{
existingRowsforJournalData<-nrow(Journal.df)
currentRowforJournal = existingRowsforJournalData + 1
Journal.df[currentRowforJournal, 1] = currentRowforJournal
Journal.df[currentRowforJournal, 2] = journalData[1, 1]
Journal.df[currentRowforJournal, 3] = journalData[1, 2]
Journal.df[currentRowforJournal, 4] = journalData[1, 3]
Journal.df[currentRowforJournal, 5] = journalData[1, 4]
Journal.df[currentRowforJournal, 6] = journalData[1, 5]
Journal.df[currentRowforJournal, 7] = journalData[1, 6]
Journal.df[currentRowforJournal, 8] = journalData[1, 7]
Journal.df[currentRowforJournal, 9] = journalData[1, 8]
}
# use the same articleIndex and articleNode as above
articleData<-parseArticle(articleNode)
existingRowsforArticle<-nrow(Article.df)
currentRowforArticle = existingRowsforArticle + 1
Article.df[currentRowforArticle, 1] <- PMID
Article.df[currentRowforArticle, 2] <- articleData[1, 1]
Article.df[currentRowforArticle, 3] <- currentRowforJournal
Article.df[currentRowforArticle, 4] <- articleData[1, 2]
Article.df[currentRowforArticle, 5] <- articleData[1, 3]
Article.df[currentRowforArticle, 6] <- articleData[1, 4]
Article.df[currentRowforArticle, 7] <- articleData[1, 5]
}
dbWriteTable(DBcon,name = "Journal", value = Journal.df, append = TRUE)
=======
library(RSQLite)
fpath = "/Users/parthpatel/Desktop/CS5200/"
dbfile = "committeedb.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(),paste0(fpath,dbfile))
library(RSQLite)
install.packages("digest")
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
library(RSQLite)
install.packages("digest")
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
install.packages("digest")
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "MediaDB.db"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
library(RSQLite)
fpath = "./"
dbfile = "MediaDB.db"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
library(RSQLite)
fpath = "./"
dbfile = "MediaDB.db"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
dbDisconnect(dbcon)
library(RSQLite)
fpath = "./"
dbfile = "courseDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile), "PRAGMA foreign_keys = ON")
dbDisconnect(dbcon)
library(XML)
library(RSQLite)
install.packages("dplyr")
library(dplyr)
install.packages("sqldf")
library(sqldf)
>>>>>>> refs/remotes/origin/main
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
<<<<<<< HEAD
fn <- "pubmed_sample.xml"
fpn = paste0(path, fn)
xmlDOM <- xmlParse(file = fn)
r <- xmlRoot(xmlDOM)
Article.df <- data.frame (PMID = integer(),
PubModel = character(),
j_Id = integer(),
ArticleTitle = character(),
Pagination = character(),
ArticleDate = character(),
Language = character(),
stringsAsFactors = F)
Journal.df <- data.frame (j_Id = integer(),
ISSN = character(),
Volume = integer(),
Issue = integer(),
Year = integer(),
Month = character(),
CiteMedium = character(),
Title = character(),
ISOAbbreviation = character(),
stringsAsFactors = F)
Abstract.df <- data.frame (Abstract_id = integer(),
PMID = integer(),
Label = character(),
AbstractText = character(),
stringsAsFactors = F)
Author.df <- data.frame (Author_id = integer(),
LastName = character(),
ForeName = character(),
Initial = character(),
Affiliation = character(),
stringsAsFactors = F)
Author_ref.df <- data.frame (Author_id = integer(),
PMID = integer(),
stringsAsFactors = F)
History.df <- data.frame (History_id = integer(),
PMID = integer(),
HistoryDate = character(),
Status = character(),
stringsAsFactors = F)
PubType.df <- data.frame (PubType_id = integer(),
PMID = integer(),
PublicationType = character(),
stringsAsFactors = F)
parseHistory <- function(aHistoryNode)
{
newHistory.df <-data.frame(HistoryDate = character(),
Status = character(),
stringsAsFactors = F)
n <- xmlSize(aHistoryNode)
for (i in 1: n)
{
aStatus<- xmlAttrs(aHistoryNode[[i]])[1]
aChild<- aHistoryNode[[i]]
aDate<- paste(xmlValue(aChild[[1]]), xmlValue(aChild[[2]]), xmlValue(aChild[[3]]), sep="-")
newHistory.df[i,1] <- aDate
newHistory.df[i,2] <- aStatus
}
return(newHistory.df)
}
parsePubType <- function(aPublicationTypeListNode)
{
newPubType.df <-data.frame(PublicationType = character(),
stringsAsFactors = F)
n <- xmlSize(aPublicationTypeListNode)
for (i in 1: n)
{
aPubType<- xmlValue(aPublicationTypeListNode[[i]])
newPubType.df[i,1] <- aPubType
}
return(newPubType.df)
}
parseJournal <- function(aJournalNode)
{ childNodeOne<-aJournalNode[[2]]
grandChildNode<-childNodeOne[[3]]
#######
ISSN <- as.character(xmlValue(aJournalNode[[1]]))
Volume <- as.numeric(xmlValue(childNodeOne[[1]]))
Issue <- as.numeric(xmlValue(childNodeOne[[2]]))
Year <- xmlValue(grandChildNode[[1]])
whole <- strsplit(Year, " ")
if(length(whole[[1]]) == 1){
Month <- xmlValue(grandChildNode[[2]])
}else{
Year <- whole[[1]][1]
Month <- whole[[1]][2]
}
Year <- as.numeric(Year)
a <- xmlAttrs(childNodeOne)
CiteMedium<-a[1]
Title <- xmlValue(aJournalNode[[3]])
ISOabbreviation <- xmlValue(aJournalNode[[4]])
newJournal.df <- data.frame(ISSN, Volume, Issue, Year, Month, CiteMedium, Title, ISOabbreviation,
stringsAsFactors = F)
return(newJournal.df)
}
parseAbstract <- function(anAbstractNode)
{
newAbstract.df <-data.frame(Label = character(),
AbstractText = character(),
stringsAsFactors = F)
n <- xmlSize(anAbstractNode)
for (i in 1: n)
{
a<-xmlAttrs(anAbstractNode[[i]])
aLabel<- a[1]
if (length(aLabel)==0)
aLabel<-""
aText<- xmlValue(anAbstractNode[[i]])
if (length(aText)==0)
aText<-""
newAbstract.df[i,1] <- aLabel
newAbstract.df[i,2] <- aText
}
return(newAbstract.df)
}
parseArticle <- function(anArticleNode)
{
a<-xmlAttrs(anArticleNode)
PubModel<-a[1]
ArticleTitle<-xpathSApply(anArticleNode, "./ArticleTitle", xmlValue)
Pagination<-xpathSApply(anArticleNode, "./Pagination/MedlinePgn", xmlValue)
Language<-xpathSApply(anArticleNode, "./Language", xmlValue)
year <- xpathSApply(anArticleNode, "./ArticleDate/Year", xmlValue)
if (length(year) == 0)
year <- ""
month <- xpathSApply(anArticleNode, "./ArticleDate/Month", xmlValue)
if (length(month) == 0)
month <- ""
day <- xpathSApply(anArticleNode, "./ArticleDate/Day", xmlValue)
if (length(day) == 0)
day <- ""
ArticleDate<-paste(year, month, day, sep="-")
newArticle.df <- data.frame(PubModel, ArticleTitle, Pagination,
ArticleDate, Language,
stringsAsFactors = F)
return (newArticle.df)
}
rowExists <- function (aRow, aDF)
{
n <- nrow(aDF)
c <- ncol(aDF)
if (n == 0)
{
return(0)
}
for (a in 1:n)
{
if (all(aDF[a,] == aRow[1,]))
{
return(a)
}
}
return(0)
}
parseAuthor <- function(anAuthorListNode)
{
newAuthor.df <-data.frame(LastName = character(),
ForeName = character(),
Initial = character(),
Affiliation = character(),
stringsAsFactors = F)
n <- xmlSize(anAuthorListNode)
for (i in 1: n)
{
child<-anAuthorListNode[[i]]
lName<-xpathSApply(child, "./LastName", xmlValue)
if (length(lName) == 0)
lName <- ""
fName<-xpathSApply(child, "./ForeName", xmlValue)
if (length(fName) == 0)
fName <- ""
initial<-xpathSApply(child, "./Initials", xmlValue)
if (length(initial) == 0)
initial <- ""
affi<-xpathSApply(child, "./Affiliation", xmlValue)
if (length(affi) == 0)
affi <- ""
newAuthor.df[i,1] <- lName
newAuthor.df[i,2] <- fName
newAuthor.df[i,3] <- initial
newAuthor.df[i,4] <- affi
}
return(newAuthor.df)
}
findIndex<- function(aNode, name)
{
numberOfChildren<-xmlSize(aNode)
i<-1
while (i<=numberOfChildren)
{
if (xmlName(aNode[[i]])==name)
break;
i<- i + 1
}
return (i)
}
numPubmedArticle <- xmlSize(r)
for (i in 1:numPubmedArticle)
{
currentNode<- r[[i]]
firstChild<-currentNode[[1]]
secondChild<-currentNode[[2]]
PMID<-as.numeric(xmlValue(firstChild[[1]]))
historyNode<-secondChild[[1]]
##use history function to construct the history table
historyData<-parseHistory(historyNode)
numberOfHistoryData<-nrow(historyData)
existingRows<-nrow(History.df)
for(j in 1: numberOfHistoryData)
{
currentRow<-existingRows + j
History.df[currentRow, 1] <-currentRow
History.df[currentRow, 2] <-PMID
History.df[currentRow, 3] <-historyData[j, 1]
History.df[currentRow, 4] <-historyData[j, 2]
}
## use author function to construct the author table
articleIndex<-findIndex(firstChild, "Article")
articleNode<-firstChild[[articleIndex]]
authorListIndex<-findIndex(articleNode, "AuthorList")
authorListNode<-articleNode[[authorListIndex]]
authorData<-parseAuthor(authorListNode)
numberOfAuthorData<-nrow(authorData)
existingRowsforAuthor<-nrow(Author.df)
for(j in 1: numberOfAuthorData)
{
currentRow<-existingRowsforAuthor + j
Author.df[currentRow, 1] <- currentRow
Author_ref.df[currentRow, 1] <- currentRow
Author_ref.df[currentRow, 2] <- PMID
Author.df[currentRow, 2] <-authorData[j, 1]
Author.df[currentRow, 3] <-authorData[j, 2]
Author.df[currentRow, 4] <-authorData[j, 3]
Author.df[currentRow, 5] <-authorData[j, 4]
}
# use the same articleIndex and articleNode as above
abstractIndex<-findIndex(articleNode, "Abstract")
abstractNode<-articleNode[[abstractIndex]]
abstractData<-parseAbstract(abstractNode)
numberOfAbstractData<-nrow(abstractData)
existingRowsforAbstract<-nrow(Abstract.df)
for(j in 1: numberOfAbstractData)
{
currentRow<-existingRowsforAbstract + j
Abstract.df[currentRow, 1] = currentRow
Abstract.df[currentRow, 2] = PMID
Abstract.df[currentRow, 3] <-abstractData[j,1]
Abstract.df[currentRow, 4] <-abstractData[j,2]
}
# use the same articleIndex and articleNode as above
publicationTypeIndex<-findIndex(articleNode, "PublicationTypeList")
publicationTypeListNode<-articleNode[[publicationTypeIndex]]
publicationTypeData<-parsePubType(publicationTypeListNode)
numberOfpubTypeData<-nrow(publicationTypeData)
existingRowsforpubTypeData<-nrow(PubType.df)
for (j in 1: numberOfpubTypeData)
{
currentRow<-existingRowsforpubTypeData + j
PubType.df[currentRow, 1] = currentRow
PubType.df[currentRow, 2] = PMID
PubType.df[currentRow, 3] = publicationTypeData[j,1]
}
# use the same articleIndex and articleNode as above
journalIndex<-findIndex(articleNode, "Journal")
journalNode<-articleNode[[journalIndex]]
journalData<-parseJournal(journalNode)
exists<-rowExists(journalData, Journal.df[,2:ncol(Journal.df)])
if (exists==0)
{
existingRowsforJournalData<-nrow(Journal.df)
currentRowforJournal = existingRowsforJournalData + 1
Journal.df[currentRowforJournal, 1] = currentRowforJournal
Journal.df[currentRowforJournal, 2] = journalData[1, 1]
Journal.df[currentRowforJournal, 3] = journalData[1, 2]
Journal.df[currentRowforJournal, 4] = journalData[1, 3]
Journal.df[currentRowforJournal, 5] = journalData[1, 4]
Journal.df[currentRowforJournal, 6] = journalData[1, 5]
Journal.df[currentRowforJournal, 7] = journalData[1, 6]
Journal.df[currentRowforJournal, 8] = journalData[1, 7]
Journal.df[currentRowforJournal, 9] = journalData[1, 8]
}
# use the same articleIndex and articleNode as above
articleData<-parseArticle(articleNode)
existingRowsforArticle<-nrow(Article.df)
currentRowforArticle = existingRowsforArticle + 1
Article.df[currentRowforArticle, 1] <- PMID
Article.df[currentRowforArticle, 2] <- articleData[1, 1]
Article.df[currentRowforArticle, 3] <- currentRowforJournal
Article.df[currentRowforArticle, 4] <- articleData[1, 2]
Article.df[currentRowforArticle, 5] <- articleData[1, 3]
Article.df[currentRowforArticle, 6] <- articleData[1, 4]
Article.df[currentRowforArticle, 7] <- articleData[1, 5]
}
dbWriteTable(DBcon,name = "Journal", value = Journal.df, append = TRUE)
dbWriteTable(DBcon,name = "Article", value = Article.df, append = TRUE)
dbWriteTable(DBcon,name = "Author", value = Author.df, append = TRUE)
dbWriteTable(DBcon,name = "Author_ref", value = Author_ref.df, append = TRUE)
dbWriteTable(DBcon,name = "Abstract", value =Abstract.df, append = TRUE)
dbWriteTable(DBcon,name = "History", value = History.df, append = TRUE)
dbWriteTable(DBcon,name = "PubType", value = PubType.df, append = TRUE)
#dbDisconnect(DBcon)
=======
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
dbDisconnect(DBcon)
>>>>>>> refs/remotes/origin/main
