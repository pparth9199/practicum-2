Month <- xmlValue(pub_date[[2]])
}else{
Year <- whole[[1]][1]
Month <- whole[[1]][2]
}
Year <- as.numeric(Year)
newJournal.df <- data.frame(ISSN, Volume, Issue, CiteMedium, Title, ISOAbbreviation, Year, Month, stringsAsFactors=FALSE)
return(newJournal.df)
}
Journal <- data.frame (ISSN = character(),
Volume = integer(),
Issue = integer(),
CiteMedium = character(),
Title = character(),
ISOAbbreviation = character(),
Year = integer(),
Month = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Journal"
journal_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(journal_nodes)){
journal <- journal_nodes[[i]]
df <- parseJournal(journal)
join <- intersect(Journal,df)
if(nrow(join) == 0){
Journal <- rbind(df,Journal)
}
}
# Adding primary key
Journal <- tibble::rowid_to_column(Journal, "j_Id")
head(Journals)
success <- dbWriteTable(DBcon, "Journal", Journal, append = T, row.names = FALSE)
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
parseJournal <- function (anJournalNode)
{
# parse the journal into its components
ISSN <- xmlValue(anJournalNode[[1]])
journal_issue <- anJournalNode[[2]]
Volume <- as.numeric(xmlValue(journal_issue[[1]]))
Issue <- as.numeric(xmlValue(journal_issue[[2]]))
CiteMedium <- xmlAttrs(journal_issue)[1]
Title <- xmlValue(anJournalNode[[3]])
ISOAbbreviation <- xmlValue(anJournalNode[[4]])
pub_date <- journal_issue[[3]]
Year <- xmlValue(pub_date[[1]])
whole <- strsplit(Year, " ")
if(length(whole[[1]]) == 1){
Month <- xmlValue(pub_date[[2]])
}else{
Year <- whole[[1]][1]
Month <- whole[[1]][2]
}
Year <- as.numeric(Year)
newJournal.df <- data.frame(ISSN, Volume, Issue, CiteMedium, Title, ISOAbbreviation, Year, Month, stringsAsFactors=FALSE)
return(newJournal.df)
}
Journal <- data.frame (ISSN = character(),
Volume = integer(),
Issue = integer(),
CiteMedium = character(),
Title = character(),
ISOAbbreviation = character(),
Year = integer(),
Month = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Journal"
journal_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(journal_nodes)){
journal <- journal_nodes[[i]]
df <- parseJournal(journal)
join <- intersect(Journal,df)
if(nrow(join) == 0){
Journal <- rbind(df,Journal)
}
}
# Adding primary key
Journal <- tibble::rowid_to_column(Journal, "j_Id")
head(Journals)
success <- dbWriteTable(DBcon, "Journal", Journal, append = T, row.names = FALSE)
parseAuthor <- function (anAuthorNode)
{
# parse the author into its components
LastName <- xmlValue(anAuthorNode[[1]])
ForeName <- xmlValue(anAuthorNode[[2]])
Initials <- xmlValue(anAuthorNode[[3]])
Affiliation <- xmlValue(anAuthorNode[[4]])
newAuthor.df <- data.frame(LastName, ForeName, Initials, Affiliation, stringsAsFactors=FALSE)
return(newAuthor.df)
}
Author <- data.frame (LastName = character(),
ForeName = character(),
Initials = character(),
Affiliation = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Author"
author_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(author_nodes)){
author <- author_nodes[[i]]
df <- parseAuthor(author)
join <- intersect(Author,df)
if(nrow(join) == 0){
Author <- rbind(df,Author)
}
}
# Adding primary key
Author <- tibble::rowid_to_column(Author, "Author_Id")
head(Author)
success <- dbWriteTable(DBcon, "Author", Author, append = T, row.names = FALSE)
parsePublication <- function (anPublicationNode)
{
# parse the publication into its components
PublicationType <- xmlValue(anPublicationNode[[1]])
newPublication.df <- data.frame(PublicationType, stringsAsFactors=FALSE)
return(newPublication.df)
}
Publications <- data.frame (PublicationType = character(),
stringsAsFactors=FALSE)
xpathEx <- "//PublicationType"
publication_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(publication_nodes)){
publication <- publication_nodes[[i]]
df <- parsePublication(publication)
join <- intersect(Publications,df)
if(nrow(join) == 0){
Publications <- rbind(df,Publications)
}
}
# Adding primary key
Publications <- tibble::rowid_to_column(Publications, "Publication_Id")
head(Publications)
parseArticle <- function (PMID, anArticleNode)
{
# parse the article into its components
ISSN <- xmlValue(anArticleNode[[1]][[1]])
Issue <- as.numeric(xmlValue(anArticleNode[[1]][[2]][[2]]))
j_Id <- sqldf(sprintf("Select j_Id from Journals where ISSN = '%s' and Issue = %i",ISSN,Issue))
ArticleTitle <- xmlValue(anArticleNode[[2]])
Pagination <- xmlValue(anArticleNode[[3]][[1]])
xpathEx <- paste("//Article[../PMID = ",PMID, "]/Language")
lang <- xpathSApply(anArticleNode, xpathEx)
Language <- xmlValue(lang)
xpathEx <- paste("//Article[../PMID = ",PMID, "]/ArticleDate")
date <- xpathSApply(anArticleNode, xpathEx)
if(length(xmlValue(date)) != 0){
ArticleDate <- xmlValue(date)
} else{
ArticleDate <- ""
}
PubModel <- xmlAttrs(anArticleNode)[1]
newArticle.df <- data.frame(PMID, j_Id, ArticleTitle, Pagination, Language, ArticleDate, PubModel, stringsAsFactors=FALSE)
return(newArticle.df)
}
Articles <- data.frame (PMID = integer(),
j_Id = integer(),
ArticleTitle = character(),
Pagination = character(),
Language = character(),
ArticleDate = character(),
PubModel = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Article | //Article/../PMID"
article_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:xmlSize(article_nodes)){
if (i %% 2 == 1){
df <- parseArticle(as.numeric(xmlValue(article_nodes[[i]])), article_nodes[[i+1]])
join <- intersect(Articles,df)
if(nrow(join) == 0){
Articles <- rbind(df,Articles)
}
}
}
head(Articles)
parseHistory <- function (PMID, anHistoryNode)
{
# parse the history into its components
HistoryDate <- xmlValue(anHistoryNode)
HistoryDate <- substr(HistoryDate, 1, 8)
Status <- xmlAttrs(anHistoryNode)[1]
newHistory.df <- data.frame(PMID, HistoryDate, Status, stringsAsFactors=FALSE)
return(newHistory.df)
}
Histories <- data.frame (PMID = integer(),
HistoryDate = character(),
Status = character(),
stringsAsFactors=FALSE)
xpathEx <- "//MedlineCitation/PMID"
PMID_nodes <- xpathSApply(xmlObj, xpathEx, xmlValue)
for (i in 1:xmlSize(PMID_nodes)){
PMID <- PMID_nodes[i]
xpathEx <- paste("//MedlineCitation[PMID = ", PMID, "]/../PubmedData/History/PubMedPubDate")
history_nodes <- xpathSApply(xmlObj, xpathEx)
for(j in 1:length(history_nodes)){
df <- parseHistory(as.numeric(PMID), history_nodes[[j]])
join <- intersect(Histories,df)
if(nrow(join) == 0){
Histories <- rbind(df,Histories)
}
}
}
# Adding primary key
Histories <- tibble::rowid_to_column(Histories, "History_Id")
head(Histories)
Temp = data.frame (PMID = integer(),
LastName = character(),
ForeName = character(),
Initials = character(),
Affiliation = character(),
stringsAsFactors=FALSE)
xpathEx <- "//MedlineCitation/PMID"
PMID_nodes <- xpathSApply(xmlObj, xpathEx, xmlValue)
for (i in 1:xmlSize(PMID_nodes)){
PMID <- PMID_nodes[i]
xpathEx <- paste("//MedlineCitation[PMID = ", PMID, "]/Article/AuthorList/Author")
author_nodes <- xpathSApply(xmlObj, xpathEx)
for(j in 1:length(author_nodes)){
df <- parseAuthor(author_nodes[[j]])
df$PMID = as.numeric(PMID)
join <- intersect(Temp,df)
if(nrow(join) == 0){
Temp <- rbind(df,Temp)
}
}
}
Author_ref <- sqldf("select Temp.PMID, a.Author_id from Temp join Authors a on a.LastName = Temp.LastName and a.ForeName = Temp.ForeName and a.Initials = Temp.Initials and ((a.Affiliation is null and Temp.Affiliation is null) or a.Affiliation = Temp.Affiliation)")
head(Author_ref)
success <- dbWriteTable(DBcon, "Publication", Publications, append = T, row.names = FALSE)
success <- dbWriteTable(DBcon, "Article", Articles, append = T, row.names = FALSE)
success <- dbWriteTable(DBcon, "History", Histories, append = T, row.names = FALSE)
success <- dbWriteTable(DBcon, "Author_ref", Author_ref, append = T, row.names = FALSE)
dbDisconnect(DBcon)
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
parseJournal <- function (anJournalNode)
{
# parse the journal into its components
ISSN <- xmlValue(anJournalNode[[1]])
journal_issue <- anJournalNode[[2]]
Volume <- as.numeric(xmlValue(journal_issue[[1]]))
Issue <- as.numeric(xmlValue(journal_issue[[2]]))
CiteMedium <- xmlAttrs(journal_issue)[1]
Title <- xmlValue(anJournalNode[[3]])
ISOAbbreviation <- xmlValue(anJournalNode[[4]])
pub_date <- journal_issue[[3]]
Year <- xmlValue(pub_date[[1]])
whole <- strsplit(Year, " ")
if(length(whole[[1]]) == 1){
Month <- xmlValue(pub_date[[2]])
}else{
Year <- whole[[1]][1]
Month <- whole[[1]][2]
}
Year <- as.numeric(Year)
newJournal.df <- data.frame(ISSN, Volume, Issue, CiteMedium, Title, ISOAbbreviation, Year, Month, stringsAsFactors=FALSE)
return(newJournal.df)
}
Journal <- data.frame (ISSN = character(),
Volume = integer(),
Issue = integer(),
CiteMedium = character(),
Title = character(),
ISOAbbreviation = character(),
Year = integer(),
Month = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Journal"
journal_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(journal_nodes)){
journal <- journal_nodes[[i]]
df <- parseJournal(journal)
join <- intersect(Journal,df)
if(nrow(join) == 0){
Journal <- rbind(df,Journal)
}
}
# Adding primary key
Journal <- tibble::rowid_to_column(Journal, "j_Id")
head(Journals)
success <- dbWriteTable(DBcon, "Journal", Journal, append = T, row.names = FALSE)
library(XML)
library(RSQLite)
library(dplyr)
library(sqldf)
fn <- "pubmed_sample.xml"
dbfn <- "pubmed.db"
DBcon <- dbConnect(RSQLite::SQLite(), dbfn)
dbExecute(DBcon, "PRAGMA foreign_keys = ON")
parseJournal <- function (anJournalNode)
{
# parse the journal into its components
ISSN <- xmlValue(anJournalNode[[1]])
journal_issue <- anJournalNode[[2]]
Volume <- as.numeric(xmlValue(journal_issue[[1]]))
Issue <- as.numeric(xmlValue(journal_issue[[2]]))
CiteMedium <- xmlAttrs(journal_issue)[1]
Title <- xmlValue(anJournalNode[[3]])
ISOAbbreviation <- xmlValue(anJournalNode[[4]])
pub_date <- journal_issue[[3]]
Year <- xmlValue(pub_date[[1]])
whole <- strsplit(Year, " ")
if(length(whole[[1]]) == 1){
Month <- xmlValue(pub_date[[2]])
}else{
Year <- whole[[1]][1]
Month <- whole[[1]][2]
}
Year <- as.numeric(Year)
newJournal.df <- data.frame(ISSN, Volume, Issue, CiteMedium, Title, ISOAbbreviation, Year, Month, stringsAsFactors=FALSE)
return(newJournal.df)
}
Journal <- data.frame (ISSN = character(),
Volume = integer(),
Issue = integer(),
CiteMedium = character(),
Title = character(),
ISOAbbreviation = character(),
Year = integer(),
Month = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Journal"
journal_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(journal_nodes)){
journal <- journal_nodes[[i]]
df <- parseJournal(journal)
join <- intersect(Journal,df)
if(nrow(join) == 0){
Journal <- rbind(df,Journal)
}
}
# Adding primary key
Journal <- tibble::rowid_to_column(Journal, "j_Id")
head(Journals)
success <- dbWriteTable(DBcon, "Journal", Journal, append = T, row.names = FALSE)
parseAuthor <- function (anAuthorNode)
{
# parse the author into its components
LastName <- xmlValue(anAuthorNode[[1]])
ForeName <- xmlValue(anAuthorNode[[2]])
Initials <- xmlValue(anAuthorNode[[3]])
Affiliation <- xmlValue(anAuthorNode[[4]])
newAuthor.df <- data.frame(LastName, ForeName, Initials, Affiliation, stringsAsFactors=FALSE)
return(newAuthor.df)
}
Author <- data.frame (LastName = character(),
ForeName = character(),
Initials = character(),
Affiliation = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Author"
author_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(author_nodes)){
author <- author_nodes[[i]]
df <- parseAuthor(author)
join <- intersect(Author,df)
if(nrow(join) == 0){
Author <- rbind(df,Author)
}
}
# Adding primary key
Author <- tibble::rowid_to_column(Author, "Author_Id")
head(Author)
success <- dbWriteTable(DBcon, "Author", Author, append = T, row.names = FALSE)
parsePublication <- function (anPublicationNode)
{
# parse the publication into its components
PublicationType <- xmlValue(anPublicationNode[[1]])
newPublication.df <- data.frame(PublicationType, stringsAsFactors=FALSE)
return(newPublication.df)
}
PubType <- data.frame (PublicationType = character(),
stringsAsFactors=FALSE)
xpathEx <- "//PublicationType"
publication_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:length(publication_nodes)){
publication <- publication_nodes[[i]]
df <- parsePublication(publication)
join <- intersect(PubType,df)
if(nrow(join) == 0){
PublType <- rbind(df,PubType)
}
}
# Adding primary key
Publications <- tibble::rowid_to_column(PubType, "PubType_Id")
head(PubType)
parseArticle <- function (PMID, anArticleNode)
{
# parse the article into its components
ISSN <- xmlValue(anArticleNode[[1]][[1]])
Issue <- as.numeric(xmlValue(anArticleNode[[1]][[2]][[2]]))
j_Id <- sqldf(sprintf("Select j_Id from Journals where ISSN = '%s' and Issue = %i",ISSN,Issue))
ArticleTitle <- xmlValue(anArticleNode[[2]])
Pagination <- xmlValue(anArticleNode[[3]][[1]])
xpathEx <- paste("//Article[../PMID = ",PMID, "]/Language")
lang <- xpathSApply(anArticleNode, xpathEx)
Language <- xmlValue(lang)
xpathEx <- paste("//Article[../PMID = ",PMID, "]/ArticleDate")
date <- xpathSApply(anArticleNode, xpathEx)
if(length(xmlValue(date)) != 0){
ArticleDate <- xmlValue(date)
} else{
ArticleDate <- ""
}
PubModel <- xmlAttrs(anArticleNode)[1]
newArticle.df <- data.frame(PMID, j_Id, ArticleTitle, Pagination, Language, ArticleDate, PubModel, stringsAsFactors=FALSE)
return(newArticle.df)
}
Articles <- data.frame (PMID = integer(),
j_Id = integer(),
ArticleTitle = character(),
Pagination = character(),
Language = character(),
ArticleDate = character(),
PubModel = character(),
stringsAsFactors=FALSE)
xpathEx <- "//Article | //Article/../PMID"
article_nodes <- xpathSApply(xmlObj, xpathEx)
for (i in 1:xmlSize(article_nodes)){
if (i %% 2 == 1){
df <- parseArticle(as.numeric(xmlValue(article_nodes[[i]])), article_nodes[[i+1]])
join <- intersect(Articles,df)
if(nrow(join) == 0){
Articles <- rbind(df,Articles)
}
}
}
head(Articles)
parseHistory <- function (PMID, anHistoryNode)
{
# parse the history into its components
HistoryDate <- xmlValue(anHistoryNode)
HistoryDate <- substr(HistoryDate, 1, 8)
Status <- xmlAttrs(anHistoryNode)[1]
newHistory.df <- data.frame(PMID, HistoryDate, Status, stringsAsFactors=FALSE)
return(newHistory.df)
}
Histories <- data.frame (PMID = integer(),
HistoryDate = character(),
Status = character(),
stringsAsFactors=FALSE)
xpathEx <- "//MedlineCitation/PMID"
PMID_nodes <- xpathSApply(xmlObj, xpathEx, xmlValue)
for (i in 1:xmlSize(PMID_nodes)){
PMID <- PMID_nodes[i]
xpathEx <- paste("//MedlineCitation[PMID = ", PMID, "]/../PubmedData/History/PubMedPubDate")
history_nodes <- xpathSApply(xmlObj, xpathEx)
for(j in 1:length(history_nodes)){
df <- parseHistory(as.numeric(PMID), history_nodes[[j]])
join <- intersect(Histories,df)
if(nrow(join) == 0){
Histories <- rbind(df,Histories)
}
}
}
# Adding primary key
Histories <- tibble::rowid_to_column(Histories, "History_Id")
head(Histories)
Temp = data.frame (PMID = integer(),
LastName = character(),
ForeName = character(),
Initials = character(),
Affiliation = character(),
stringsAsFactors=FALSE)
xpathEx <- "//MedlineCitation/PMID"
PMID_nodes <- xpathSApply(xmlObj, xpathEx, xmlValue)
for (i in 1:xmlSize(PMID_nodes)){
PMID <- PMID_nodes[i]
xpathEx <- paste("//MedlineCitation[PMID = ", PMID, "]/Article/AuthorList/Author")
author_nodes <- xpathSApply(xmlObj, xpathEx)
for(j in 1:length(author_nodes)){
df <- parseAuthor(author_nodes[[j]])
df$PMID = as.numeric(PMID)
join <- intersect(Temp,df)
if(nrow(join) == 0){
Temp <- rbind(df,Temp)
}
}
}
Author_ref <- sqldf("select Temp.PMID, a.Author_id from Temp join Authors a on a.LastName = Temp.LastName and a.ForeName = Temp.ForeName and a.Initials = Temp.Initials and ((a.Affiliation is null and Temp.Affiliation is null) or a.Affiliation = Temp.Affiliation)")
head(Author_ref)
success <- dbWriteTable(DBcon, "PubType", PubType, append = T, row.names = FALSE)
success <- dbWriteTable(DBcon, "Article", Articles, append = T, row.names = FALSE)
success <- dbWriteTable(DBcon, "History", Histories, append = T, row.names = FALSE)
success <- dbWriteTable(DBcon, "Author_ref", Author_ref, append = T, row.names = FALSE)
dbDisconnect(DBcon)
parseAbstract <- function(anAbstractNode)
{
newAbstract.df <-data.frame(Label = character(),
AbstractText = character(),
stringsAsFactors = F)
n <- xmlSize(anAbstractNode)
for (i in 1: n)
{
a<-xmlAttrs(anAbstractNode[[i]])
aLabel<- a[1]
aText<- xmlValue(anAbstractNode[[i]])
newAbstract.df[i,1] <- aLabel
newAbstract.df[i,2] <- aText
}
return(newAbstract.df)
}
